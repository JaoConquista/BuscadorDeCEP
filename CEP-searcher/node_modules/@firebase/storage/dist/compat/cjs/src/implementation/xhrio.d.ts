/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
<<<<<<< HEAD:CEP-searcher/node_modules/@firebase/storage/dist/src/implementation/connection.d.ts
 * Network headers
 */
export interface Headers {
    [name: string]: string;
=======
 * XHR headers
 */
export interface Headers {
    [name: string]: string | number;
>>>>>>> d98fa87d3bd26ef0e88bc6afe46530c3f86f63c1:CEP-searcher/node_modules/@firebase/storage/dist/compat/cjs/src/implementation/xhrio.d.ts
}
/**
 * A lightweight wrapper around XMLHttpRequest with a
 * goog.net.XhrIo-like interface.
 */
<<<<<<< HEAD:CEP-searcher/node_modules/@firebase/storage/dist/src/implementation/connection.d.ts
export interface Connection {
    send(url: string, method: string, body?: ArrayBufferView | Blob | string | null, headers?: Headers): Promise<void>;
=======
export interface XhrIo {
    send(url: string, method: string, body?: ArrayBufferView | Blob | string | null, headers?: Headers): Promise<XhrIo>;
>>>>>>> d98fa87d3bd26ef0e88bc6afe46530c3f86f63c1:CEP-searcher/node_modules/@firebase/storage/dist/compat/cjs/src/implementation/xhrio.d.ts
    getErrorCode(): ErrorCode;
    getStatus(): number;
    getResponseText(): string;
    /**
     * Abort the request.
     */
    abort(): void;
    getResponseHeader(header: string): string | null;
    addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;
    removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;
}
/**
 * Error codes for requests made by the the XhrIo wrapper.
 */
export declare enum ErrorCode {
    NO_ERROR = 0,
    NETWORK_ERROR = 1,
    ABORT = 2
}
